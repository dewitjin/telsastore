using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using StoreAPI.Models;
using StoreAPI.Models.Dtos;
using StoreAPI.Repository.IRepository;
using System;
using System.Collections.Generic;

namespace StoreAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrdersController : ControllerBase
    {
        //TODO clean up repo if not needed
        private ICustomerRepository _cRepo;
        private IOrderRepository _oRepo;
        private IOrderItemRepository _oiRepo;
        private IItemRepository _itemRepo;
        private IAddressRepository _aRepo;

        private readonly IMapper _mapper;

        public OrdersController(ICustomerRepository cRepo, IOrderRepository oRepo, IOrderItemRepository oiRepo, IItemRepository itemRepo, IAddressRepository aRepo, IMapper mapper)
        {
            _cRepo = cRepo;
            _oRepo = oRepo;
            _oiRepo = oiRepo;
            _itemRepo = itemRepo;
            _aRepo = aRepo;
            _mapper = mapper;
        }


        [HttpGet("{createdDateTime:datetime}/{customerId=int}", Name = "GetOrder")]
        public IActionResult GetOrder(DateTime createdDateTime, int customerId)
        {

            var order = _oRepo.GetOrder(createdDateTime, customerId);

            if (order == null) {
                return BadRequest(ModelState);
            }

            var orderItems = _oiRepo.GetOrderItemsByOrderId(order.Id);
            var orderItem = new List<OrderItem>();

            foreach(var oi in orderItems) {
                orderItems.Add(_mapper.Map<OrderItem>(oi));
            }

            var getOrderDto = new GetOrderDto()
            {
                CustomerId = order.CustomerId,
                CustomerName = _cRepo.GetCustomer(order.CustomerId).Name,
                OrderPrice = order.OrderPrice, 
                OrderTax = order.OrderTax, 
                OrderItems = orderItem 
            };
            return Ok(getOrderDto);
        }

        [HttpPost]     
        public IActionResult CreateOrder([FromBody] CreateOrderDto orderDto)
        {

            if (orderDto == null || orderDto.OrderItems == null)
            {
                return BadRequest(ModelState);
            }

            var order = new Order() { CustomerId = orderDto.CustomerId, CreatedDateTime = orderDto.CreatedTime }; 

            if (!_oRepo.CreateOrder(order))
            {
                ModelState.AddModelError("", $"Something went wrong when saving the record {order.CreatedDateTime} {order.CustomerId}");
                return StatusCode(500, ModelState);
            }

            order = _oRepo.GetOrder(order.CreatedDateTime, order.CustomerId); 

            decimal orderPrice = 0;
            var orderItems = new List<OrderItem>();
            foreach (var createOrderItemDto in orderDto.OrderItems)
            {
                var item = _itemRepo.GetItem(createOrderItemDto.ItemId);
                var orderItemPrice = item.UnitPrice * createOrderItemDto.Quantity;
                orderPrice += orderItemPrice;
               
                var orderItem = new OrderItem()
                {
                    OrderId = order.Id, //generated by server
                    Quantity = createOrderItemDto.Quantity,
                    ItemId = item.Id,
                    OrderItemPrice = orderItemPrice
                };

                if (!_oiRepo.CreateOrderItem(orderItem))
                {
                    ModelState.AddModelError("", $"Something went wrong when saving the record {orderItem}"); 
                    return StatusCode(500, ModelState);
                }
                else 
                {
                    orderItems.Add(orderItem);
                }
     
            }

            var customer = _cRepo.GetCustomer(order.CustomerId);

            if (customer.AddressId != null)
            {
                var address = _aRepo.GetAddressById((int)customer.AddressId);
                order.OrderTax = orderPrice * Helper.SalesTaxAPI.GetTaxRate(address);
                order.OrderPrice = orderPrice + order.OrderTax;
            }
            else 
            {
                ModelState.AddModelError("", $"Something went wrong when saving the record {order.CustomerId} address did not return a tax rate"); 
                return StatusCode(500, ModelState);

            }

            //Update with order price and tax
            if (!_oRepo.UpdateOrder(order))
            {
                ModelState.AddModelError("", $"Something went wrong when saving the record {order}"); 
                return StatusCode(500, ModelState);
            }

            var getOrderDto = new GetOrderDto()
            {
                CustomerId = order.CustomerId,
                CustomerName = _cRepo.GetCustomer(order.CustomerId).Name,
                CreatedDateTime = order.CreatedDateTime,
                OrderItems = orderItems,
                OrderTax = order.OrderTax,
                OrderPrice = order.OrderPrice,
            };

            return CreatedAtAction("CreateOrder", getOrderDto); 
        }
    }
}
